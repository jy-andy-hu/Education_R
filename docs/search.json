[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Collection of Practical Projects with R",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#what",
    "href": "index.html#what",
    "title": "A Collection of Practical Projects with R",
    "section": "What",
    "text": "What\nThis collection is designed for my students or anyone who want to be productive and analytical with R. Many data and examples used in this work are either from various R libraries or public available datasets.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "A Collection of Practical Projects with R",
    "section": "Why",
    "text": "Why\nThroughout my various teaching experiences, especially at the beginner’s level, I noitced that (business analytics) students may find it awkward learn about R. This is quite interesting, because R is designed to be non-professional-programmer-centric and more data-analysis-centric. Overtime, I conclude that students would like to focus on data analysis as much as possible rather than learning all of the overhead about R, at least not when they start as a beginner. Therefore, I hope to build a collection that allows R users, especially new R users, to get productive with R as soon and effectively as possible. If they wish to pursue and become more professional with R, they would have a nice familiarity to move on. In other words, the focus here is to cut straight to solving data problems and conduct data analysis through various different practical projects. I understand how programatic I sound. Furthermore, this collection may seem quite possibly counter-intuitive for anyone who used to learn computing languages and wish to formally learn R in a traditional way. I deeply appreciate there many different approaches how to get someone started with a particular computing syntax/environment and each comes with their pros and cons.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#how",
    "href": "index.html#how",
    "title": "A Collection of Practical Projects with R",
    "section": "How",
    "text": "How\nThis collection can be used independently on its own. All data are publicly avaiable and are clearly referenced, so that if you wish to try or replicate any of the projects here, you are fully equipped to do so.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "First_Feel_About_R_UCB_Admission.html",
    "href": "First_Feel_About_R_UCB_Admission.html",
    "title": "1  First Feel of R: Exploratory Data Analysis - UCB Admission Data",
    "section": "",
    "text": "1.1 What Is R?\nR is ‘GNU S’, a freely available language and environment for statistical computing and graphics which provides a wide variety of statistical and graphical techniques: linear and nonlinear modelling, statistical tests, time series analysis, classification, clustering, etc. Please consult the R project homepage for further information. (https://cran.r-project.org/)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First Feel of R: Exploratory Data Analysis - UCB Admission Data</span>"
    ]
  },
  {
    "objectID": "First_Feel_About_R_UCB_Admission.html#what-is-this-file",
    "href": "First_Feel_About_R_UCB_Admission.html#what-is-this-file",
    "title": "1  First Feel of R: Exploratory Data Analysis - UCB Admission Data",
    "section": "1.2 What Is This File?",
    "text": "1.2 What Is This File?\nThis file can be rendered as an html file. With HTML format, you should be able to open it with any modern internet browser. You won’t be able to execute any R code in the browser, but all outputs are already available to you in this document.\nTo create this file, I used something called Quarto Markdown Document. When you execute code within the notebook, the results appear beneath the code. Quarto is an open-source scientific and technical publishing system. It allows to embed codes and outputs in the same document, fantastic for researchers, scholars and educators!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First Feel of R: Exploratory Data Analysis - UCB Admission Data</span>"
    ]
  },
  {
    "objectID": "First_Feel_About_R_UCB_Admission.html#what-are-we-accomplishing-here",
    "href": "First_Feel_About_R_UCB_Admission.html#what-are-we-accomplishing-here",
    "title": "1  First Feel of R: Exploratory Data Analysis - UCB Admission Data",
    "section": "1.3 What Are We Accomplishing Here?",
    "text": "1.3 What Are We Accomplishing Here?\nIn Microsoft Excel, we can perform a series of data manipulation, exploration and visualization tasks. As a bonus and complement, this is to provide some additional exposure to one of the most popular and powerful statistical and graphical solutions, yet COMPLETELY FREE, called R! We will doing a few tasks that resemble PivotTable functions and visualize some datapoints just like what we can accomplished with Microsoft Excel, but using R.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First Feel of R: Exploratory Data Analysis - UCB Admission Data</span>"
    ]
  },
  {
    "objectID": "First_Feel_About_R_UCB_Admission.html#performing-tasks-with-r-using-ucbadmission-dataset",
    "href": "First_Feel_About_R_UCB_Admission.html#performing-tasks-with-r-using-ucbadmission-dataset",
    "title": "1  First Feel of R: Exploratory Data Analysis - UCB Admission Data",
    "section": "1.4 Performing Tasks with R Using UCBAdmission Dataset",
    "text": "1.4 Performing Tasks with R Using UCBAdmission Dataset\n\nBackground\nName of the dataset: UCBAdmission\nDescription: Aggregate data on applicants to graduate school at Berkeley for the six largest departments in 1973 classified by admission and sex.\nDetailed information: https://rdrr.io/r/datasets/UCBAdmissions.html\nThe official study: Sex Bias in Graduate Admissions: Data from Berkeley\n\n\nImport libraries\nThousands of available libraries are what make R powerful. They are voluntarily developed by enthusiasts in the R community and you guessed it, there are many many many…. many of them. Consider libraries are different add-ons that you can plug-in to your workflow to get things done faster. And yes! These libraries are free, as well!!….\nIf a library is never used on the computer before, you do need to install it first and it is super easy to do with one line of code in R. For example:\n\n#install.packages(\"janitor\") #btw, I don't really know why it is called \"janitor\", probably a good data cleaning tool??...\n\nAfter that you can just call it when you need it. I have many installed already, so I will just call all the ones needed for this tutorial. However, if you have not already installed these libraries, be sure to install them first.\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(ggplot2)\n\n\n\nImport data\nIn R environment, there are many illustrative datasets built in UCBAdmission is one of them.\nTo import data into a tabular format, called “data frame”. In particular, we will use a “flavour” of data frame called “tibble”.\nEvery time when you use “&lt;-” to point at something (in this case “df”), that will refer to the object you assign it to. The following command allows “df” to refer to the tibble dataframe that we just created from UCBAdmissions built-in dataset.\n\ndf &lt;- as_tibble(UCBAdmissions)\n\n\n\nExplore data\nTo see a few of top records.\n\nhead(df)\n\n\n  \n\n\n\nTo see the structure of data frame:\n\nstr(df)\n\ntibble [24 × 4] (S3: tbl_df/tbl/data.frame)\n $ Admit : chr [1:24] \"Admitted\" \"Rejected\" \"Admitted\" \"Rejected\" ...\n $ Gender: chr [1:24] \"Male\" \"Male\" \"Female\" \"Female\" ...\n $ Dept  : chr [1:24] \"A\" \"A\" \"A\" \"A\" ...\n $ n     : num [1:24] 512 313 89 19 353 207 17 8 120 205 ...\n\n\nTo view the entire data frame, just run the object itself\n\ndf\n\n\n  \n\n\n\n\nCreate frequency and relative frequency tables\nTo create frequency tables by Gender and Admit. We will leverage the powerful and comprehensive data cleaning library called tidyverse. In fact, tidyverse is a collection library of a bunch of other libraries.\nNote: “|&gt;” is called “pipe operator”. You might also have seen a variant of pipe operator like this “%&gt;%”. This operator allows the evaluated object from the current function(s) to be passed down as an input to a parameter of the next function. This is one of the great creations in R and really enables to simplify the codes and make the codes procedural and therefore, more readable. If you would like to read more about pipe operators in R, this is an excellent start: Pipelines in R.\nFor example, the following code can be interpreted like this in a more human English way:\n\nline 1: we would like to create a new object called admit_gender_pivot, starting with df object (keep in mind that “df” is the same tibble dataframe we just created above)\nline 2: and then, df will be grouped by “Admit” and “Gender” columns\nline 3: and then, the grouped df will be summarized to a new metric (column) called “Freg_Agg”, which is to sum of values in “n” column, and we will keep the grouping\nline 4: and then, ungroup the summarized tibble dataframe\nline 5: and finally, pivot the dataframe from line 4 to be a wider dataframe, by using the values in “Admit” column to be the new column names and aggregate values from “Freq_Agg” column.\n\n\nadmit_gender_pivot &lt;- df |&gt;  \n  group_by(Admit, Gender)  |&gt;  \n  summarise(Freq_Agg = sum(n),  .groups = \"keep\") |&gt;\n  ungroup() |&gt; \n  pivot_wider(names_from = Admit, values_from = Freq_Agg)\n\nadmit_gender_pivot\n\n\n  \n\n\n\nTo add totals, row/column titles, we use a function called “adorn_totals”, from a library called janitor, an excellent collection of helper tools to “clean up” the tables.\n\nadmit_gender_pivot_full &lt;- admit_gender_pivot |&gt; \n  adorn_totals(where = c(\"row\", \"col\")) |&gt; \n  # add as_tibble to enforce the output of adorn_totals to be tibble again\n  as_tibble()\nadmit_gender_pivot_full\n\n\n  \n\n\n\nTo see % of admission to gender total by each gender:\n\nadmit_gender_pivot_pct &lt;- admit_gender_pivot |&gt; \n  adorn_percentages(\"row\") |&gt; \n  # to round percentages decimal places to 2 places\n  adorn_pct_formatting(digits = 2) |&gt; \n  as_tibble()\nadmit_gender_pivot_pct\n\n\n  \n\n\n\n\n\nCreate bar plots for the relative frequency table\nWe start by creating an unpivoted (longer) relative frequency table. Essentially, this is the opposite of “pivot_wider”, as we will make the admission results headers to be a column by itself (Admit) and the measure (relative frequencies) will become its own column as well (Rel_Freq).\n\nadmit_gender_pct &lt;- admit_gender_pivot_pct |&gt; \n  pivot_longer(cols = c(Admitted, Rejected), names_to = \"Admit\", values_to = \"Rel_Freq\")\nadmit_gender_pct\n\n\n  \n\n\n\nAnother great creation in R is a comprehensive graphics library ggplot2, based on Layered Grammar of grahics. It truly is powerful enough that it allows you to create any type of grahics, only limited by your imagination. We will use this exercise to build the basics of this grammar and ggplot2 package.\nI hope by this point, you really appreciate what makes R so powerful are these thoughtfully curated libraries that can just “plug and play”.\nThere are layers when graphing with ggplot libaray.\nThe beginning layer is to create the canvas and then the 2nd layer is to assign each axis. You won’t be able to see Gender yet, because that will be shown as different colors the graphic is actually made and we haven’t told what graphics we want to create yet. So, patience, my friends.\n\nggplot(admit_gender_pct, mapping = aes(x=Admit, y=Rel_Freq, fill=Gender))\n\n\n\n\n\n\n\n\n3rd layer is to plot the barplot for relative frequency. Now, with geom_bar, we are telling R to create a bar chart, and you will see\nNote: the “+” sign functions just like ” |&gt; “, an operator to connect from one function to another within ggplot2 library. Just a weird dialect specifically spoken mandated by ggplot2 creators if you will.\n\nggplot(admit_gender_pct, mapping = aes(x=Admit, y=Rel_Freq, fill=Gender))+\n  # stat=\"identity\" means we want to use the data values just as they are without being summarized other ways\n  # position allows to specify different types of bars (stacked, dodged etc...)\n  geom_bar(stat=\"identity\", position = 'dodge')\n\n\n\n\n\n\n\n\nTo demo manually change category colours, we can use “scale_fill_manual”\n\nggplot(admit_gender_pct, mapping = aes(x=Admit, y=Rel_Freq, fill=Gender))+\n  geom_bar(stat=\"identity\", position = 'dodge')+\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"skyblue\"))\n\n\n\n\n\n\n\n\nTo add title for the barplot\n\nggplot(admit_gender_pct, mapping = aes(x=Admit, y=Rel_Freq, fill=Gender))+\n  geom_bar(stat=\"identity\", position = 'dodge')+\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"skyblue\"))+\n  ggtitle(\"Relative Frequency Barplot by Admit and Gender\")\n\n\n\n\n\n\n\n\nTo add data labels to each bar:\n\nggplot(admit_gender_pct, mapping = aes(x=Admit, y=Rel_Freq, fill=Gender))+\n  geom_bar(stat=\"identity\", position = 'dodge')+\n  geom_text(aes(label = Rel_Freq), colour = \"orange\", position = position_dodge(width = 1), )+\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"skyblue\"))+\n  ggtitle(\"Relative Frequency Barplot by Admit and Gender\")\n\n\n\n\n\n\n\n\n\n\nCreate relative frequency tables for each department\nWe repeat what we have done in “creating frequency and relative frequency table” section, but for each of the department\nWe will make an example with department A first:\n\nadmit_gender_pivot_DpetA &lt;- df|&gt; \n  filter(Dept==\"A\") |&gt; \n  group_by(Admit, Gender) |&gt;  \n  summarise(Freq_Agg = sum(n), .groups = \"keep\") |&gt;  \n  pivot_wider(names_from = Admit, values_from = Freq_Agg)\nadmit_gender_pivot_DpetA\n\n\n  \n\n\n\nThen similar to above, we will get relative frequencies.\n\nadmit_gender_pivot_DpetA |&gt; \n  adorn_percentages(\"row\") |&gt; \n  adorn_pct_formatting(digits = 2) |&gt;  \n  as_tibble()\n\n\n  \n\n\n\nIf you think about it, we are really are just repeating these steps above for each department for each of the filtered subset. This is where we have to ask ourselves, “we are programming anyways, can we automate things?”\nUsually, when this question rises, the answer is “yes”!, so let’s put our thinking hat on.\n\nWe want to “bundle” all of the data transform steps because they are consistent across all departments. We call this “bundle” a “function”, something that takes a input and returns an output. In fact, all of the things that you have seen thus far, like “filter”, ” group_by”, “summarize” etc… they are all functions! It’s that this time, we are writing a custome one ourselves.\nWe want to parameterize for different department values wherever we need to call out for that particular department. This really just a list of department values.\nWe “map” each department value as input to the same function, and then let the computer walk through the entire parameter series.\n\nOkay, enough all this talk, let’s see that in action!\nFirst, we need to create the function that does all of the data transformation and creating graphics. It sounds a lot, but we actually have all of the steps figured out, we just need to wrap them all in a function.\n\n# we are creating a function called create_dept_relative_freq, which takes an input called \"dept\"\ncreate_dept_relative_freq &lt;- function(dept){\n  \n  admit_gender_pivot_Dpet &lt;- df |&gt; \n    # this is where the \"parameterize concept is applied, if we pass dept == \"A\" to this function, it will filter for just Dept A related rows, neat!!!\n    filter(Dept==dept) |&gt; \n    # all of the following steps you have seen above, no surprises here\n    group_by(Admit, Gender) |&gt;  \n    summarise(Freq_Agg = sum(n), .groups = \"keep\")|&gt; \n    pivot_wider(names_from = Admit, values_from = Freq_Agg)|&gt; \n    adorn_percentages(\"row\") |&gt; \n    adorn_pct_formatting(digits = 2)|&gt; \n    as_tibble()\n  \n  # return specifies what output you would this function to yield. In this case, we would like to have the tranformed data frame of course...\n  return(admit_gender_pivot_Dpet)\n}\n\nTo get a list (vector) of departments, we can get “distinct” values from Dept column and then “pull”. All of these are courtesy of “tidyverse”.\n\ndept_list &lt;- df |&gt; \n  distinct(Dept) |&gt; \n  pull()\ndept_list\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"\n\n\nNow, we need to have a mechanism to let R walk through all values in dept_list and pass each value to the same function. Once, again, courtesy of “tidyverse”, a function called “map” will take care of this for us… We will just chill and wait for the data frames!\nNote: “~create_dept_relative_freq(.x)” means that we are taking each value found in dept_list object and pass them individually one after another to run the function create_dept_relative_freq. “.x” is simply the parameter placeholder for “dept” which represents one of “A”, “B”, “C”….\n\nmap(dept_list, ~create_dept_relative_freq(.x))\n\n[[1]]\n# A tibble: 2 × 3\n  Gender Admitted Rejected\n  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   \n1 Female 82.41%   17.59%  \n2 Male   62.06%   37.94%  \n\n[[2]]\n# A tibble: 2 × 3\n  Gender Admitted Rejected\n  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   \n1 Female 68.00%   32.00%  \n2 Male   63.04%   36.96%  \n\n[[3]]\n# A tibble: 2 × 3\n  Gender Admitted Rejected\n  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   \n1 Female 34.06%   65.94%  \n2 Male   36.92%   63.08%  \n\n[[4]]\n# A tibble: 2 × 3\n  Gender Admitted Rejected\n  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   \n1 Female 34.93%   65.07%  \n2 Male   33.09%   66.91%  \n\n[[5]]\n# A tibble: 2 × 3\n  Gender Admitted Rejected\n  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   \n1 Female 23.92%   76.08%  \n2 Male   27.75%   72.25%  \n\n[[6]]\n# A tibble: 2 × 3\n  Gender Admitted Rejected\n  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;   \n1 Female 7.04%    92.96%  \n2 Male   5.90%    94.10%  \n\n\nHow neat!!!\n\n\nCreate a series of barplot for relative frequencies of admission by gender given a department\nOkay, now you have a bit taste of creating relative frequencies for each department, you probably wonder: since we are creating the similar graphic grammar for all of the barplots, can we extend our function so that it is capable of creating graphics as well?\nYou betcha!!\n\n# we are creating a function called create_dept_relative_freq, which takes an input called \"dept\"\ncreate_dept_admit_relative_freq_bar &lt;- function(dept){\n  # this part is exactly like what we have in create_dept_relative_freq function\n  admit_gender_barplot &lt;- df |&gt; \n    filter(Dept==dept) |&gt; \n    # all of the following steps you have seen above, no surprises here\n    group_by(Admit, Gender) |&gt;  \n    summarise(Freq_Agg = sum(n), .groups = \"keep\") |&gt;  \n    pivot_wider(names_from = Admit, values_from = Freq_Agg) |&gt;  \n    adorn_percentages(\"row\") |&gt; \n    adorn_pct_formatting(digits = 2) |&gt;  \n    as_tibble() |&gt; \n    pivot_longer(cols = c(Admitted, Rejected), names_to = \"Admit\", values_to = \"Rel_Freq\") |&gt; \n    # and now we are stitching with the ggplot portion for that barplot\n    ggplot(mapping = aes(x=Admit, y=Rel_Freq, fill=Gender))+\n    geom_bar(stat=\"identity\", position = 'dodge')+\n    geom_text(aes(label = Rel_Freq), colour = \"orange\", position = position_dodge(width = 1), )+\n    scale_fill_manual(values = c(\"Female\" = \"red\", \"Male\" = \"skyblue\"))+\n    # \"paste\" function allows us to dynamically generate the title for the barplot. Think of it as some kind of magic glue that stick a variable or many variables after a fixed text value.\n    ggtitle(paste(\"Relative Frequency Barplot by Admit and Gender, Dept\", dept))\n  \n  # return specifies what output you would this function to yield. In this case, we would like to have the tranformed data frame of course...\n  return(admit_gender_barplot)\n}\n\nmap(dept_list, create_dept_admit_relative_freq_bar)\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n\nA much much fancier way to achieve the same:\nThis part is interesting: the relative frequency that we are seeking is each Freq out of total applicants of a particular gender to a particular Dept. Therefore, to get this subtotal in R, like before, we use “group_by” function from “tidyverse” library to find proper granularity level that we need. Then, we can simply use function called “mutate” (also from “tidyverse”) to get all of the relative frequencies that we need, by passing all of the summarize and pivot wider/longer process. “mutate” is just a go-to function to modify a tibble dataframe, such as changing values, adding a new column etc…\nIn this case, we need to group Dept and Gender.\n\ndf_subtotal &lt;- df |&gt;  \n  group_by(Dept, Gender) |&gt; \n  # we are creating a new column called \"Freq_subtotal\"\n  mutate(Freq_subtotal = sum(n)) |&gt; \n  ungroup()\n\nhead(df_subtotal, 10)\n\n\n  \n\n\n\nOne more inch to go to create the Rel_Freq itself\n\ndf_rf &lt;- df_subtotal %&gt;% \n  group_by(Dept, Gender) |&gt; \n  # we are creating a new column called \"Freq_subtotal\", notice how group_by enables to create the same subtotals as long as the values are the same for Dept and Gender, but not the same by Admit values\n  mutate(\n    Freq_subtotal = sum(n), \n    # we are creating the relative frequency column and round the decimal places to 4 decimal places\n    Rel_Freq = round(n/Freq_subtotal, digits = 4)\n    ) |&gt; \n  ungroup()\n\nhead(df_rf)\n\n\n  \n\n\n\nI will also introduce a “fancy grammar” enabled from ggplot2, called “facet”. “facet” allows to create same graphics by distinct values of a data dimension and fit them all in the same graphic, instead of multiple individual graphics. This is a perfect use case for our scenario and enables to view all 6 departments side by side. I hope you get sense of the powerful graphic capability from R, particularly from ggplot2. This is something basic data analysis tool like Microsoft Excel not capable of easily accomplish.\n\nggplot(df_rf, mapping = aes(x=Admit, y=Rel_Freq, fill=Gender))+\n  geom_bar(stat=\"identity\", position = \"dodge\")+\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"skyblue\"))+\n  facet_wrap(~ Dept)+\n  ggtitle(\"Relative Frequency Barplot by Admit and Gender, Dept\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First Feel of R: Exploratory Data Analysis - UCB Admission Data</span>"
    ]
  },
  {
    "objectID": "First_Feel_About_R_UCB_Admission.html#closing",
    "href": "First_Feel_About_R_UCB_Admission.html#closing",
    "title": "1  First Feel of R: Exploratory Data Analysis - UCB Admission Data",
    "section": "1.5 Closing",
    "text": "1.5 Closing\nThat’s it for this session… I hope you enjoy the content the same as much as I write it. Have a great day!!! 🎉🎉",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>First Feel of R: Exploratory Data Analysis - UCB Admission Data</span>"
    ]
  }
]